{"version":3,"sources":["types.ts","state/constants.ts","state/atoms.ts","algorithms/common.ts","hooks.ts","components/GridNode.tsx","algorithms/dijkstra.ts","algorithms/astar.ts","components/Grid.tsx","components/menu/AlgorithmMenu.tsx","components/menu/SpeedMenu.tsx","components/menu/PatternMenu.tsx","components/Controls.tsx","components/App.tsx","index.tsx"],"names":["Algorithm","NUM_OF_NODES","isDrawingWallsAtom","atom","key","default","isVisualizedAtom","isMovingStartAtom","isMovingEndAtom","nodeAtom","atomFamily","row","column","position","flags","isWall","isVisited","createNode","visitedNodesAtom","shortestPathNodesAtom","selectedAlgorithmAtom","Dijkstra","visualizationSpeedAtom","nodeClassesAtom","getIndex","isEndNode","node","endPosition","getNeighbours","grid","index","neighbours","push","useTimeout","callback","delay","savedCallback","useRef","useEffect","current","id","setTimeout","clearTimeout","GridNode","visitedNumber","pathNumber","visitedCount","setIsStartPosition","setIsEndPosition","setResetNode","setClearNode","isDrawingWalls","useRecoilValue","isVisualized","visualizationSpeed","useRecoilState","isMovingStart","setIsMovingStart","isMovingEnd","setIsMovingEnd","setNode","isDefaultStart","isDefaultEnd","useState","isStart","setIsStart","isEnd","setIsEnd","getClassNames","useCallback","wallClass","classNames","classes","setClasses","isStartPosition","undefined","isEndPosition","resetNode","clearNode","ReactDOM","unstable_batchedUpdates","getVisitedNodeDelay","getPathNodeDelay","drawWall","className","onMouseOver","onMouseDown","onMouseLeave","onMouseUp","nodeDistanceComparator","a","b","aProps","props","bProps","distance","Infinity","distanceDifference","getDistance","setDistance","nodeFComparator","f","fDifference","g","manhattanDistance","Math","abs","getGScore","setGScore","value","setFScore","startPositionFuncs","endPositionFuncs","resetNodeFuncs","clearNodeFuncs","getArrayIndex","array","length","findIndex","getNodePositionFromChildren","positionFuncs","nodePosition","childPosition","positionFunc","Grid","setOnVisualize","setOnReset","setOnClearPath","childStartPosition","childIndex","childEndPosition","childResetNode","childClearNode","setIsDrawingWalls","useSetRecoilState","setIsVisualized","visitedNodes","setVisitedNodes","shortestPathNodes","setShortestPathNodes","selectedAlgorithm","visualizeAlgorithm","forEach","resetFunc","resetGridState","clearFunc","getGridState","useRecoilCallback","getLoadable","snapshot","nodes","i","j","nodeValue","getValue","JSON","parse","stringify","reset","startNodePosition","endNodePosition","gridNodes","newVisitedNodes","startPosition","priorityQueue","Heap","init","seenIndices","Set","closestNode","pop","has","add","neighbour","newDistance","newNeighbour","parent","isEmpty","dijkstra","AStar","startNode","discoveredNodes","currentNode","currentProps","newScore","aStar","endNode","shortestPath","getShortestPath","Array","from","NUM_OF_ROWS","keys","map","floor","slice","reverse","AlgorithmMenu","setSelectedAlgorithm","menuAnchorElement","setMenuAnchorElement","open","Boolean","handleAlgorithmChange","event","currentTarget","dataset","myValue","Button","sx","mx","backgroundColor","color","size","endIcon","onClick","Menu","anchorEl","onClose","MenuItem","SpeedMenu","setVisualizationSpeed","handleSpeedChange","Number","parseInt","ml","getSpeedString","PatternMenu","Controls","visualizeGrid","resetGrid","clearPath","AppBar","alignItems","mb","Toolbar","variant","width","Typography","fontFamily","fontWeight","Box","display","justifyContent","flexDirection","flex","transform","mr","App","childVisualize","childReset","childClearPath","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.627fd7e9.chunk.js","sourcesContent":["export type VoidFunction = () => void;\r\n\r\nexport interface Node {\r\n  position: NodePosition;\r\n  flags: NodeFlags;\r\n  parent?: Node;\r\n  props?: any;\r\n}\r\n\r\nexport interface DijkstraProps {\r\n  distance: number;\r\n}\r\n\r\nexport interface AStarProps {\r\n  f: number;\r\n  g: number;\r\n}\r\n\r\nexport interface NodePosition {\r\n  row: number;\r\n  column: number;\r\n}\r\n\r\nexport interface NodeFlags {\r\n  isWall: boolean;\r\n  isVisited: boolean;\r\n}\r\n\r\nexport enum Algorithm {\r\n  Dijkstra = \"Dijkstra\",\r\n  AStar = \"A*\",\r\n}\r\n","export const NUM_OF_ROWS = 20;\r\nexport const NUM_OF_NODES = 50;\r\n\r\nexport const DEFAULT_START_ROW = 10;\r\nexport const DEFAULT_START_COLUMN = 5;\r\nexport const DEFAULT_END_ROW = 10;\r\nexport const DEFAULT_END_COLUMN = 45;\r\n\r\nexport const FAST_NODE_UPDATE_SPEED = 4;\r\nexport const MEDIUM_NODE_UPDATE_SPEED = 10;\r\nexport const SLOW_NODE_UPDATE_SPEED = 25;\r\n","import { atom, atomFamily } from \"recoil\";\r\nimport { Algorithm, Node } from \"../types\";\r\nimport { MEDIUM_NODE_UPDATE_SPEED } from \"./constants\";\r\n\r\nconst createNode = (row: number, column: number): Node => {\r\n  return {\r\n    position: {\r\n      row,\r\n      column,\r\n    },\r\n    flags: {\r\n      isWall: false,\r\n      isVisited: false,\r\n    },\r\n  };\r\n};\r\n\r\nexport const isDrawingWallsAtom = atom<boolean>({\r\n  key: \"isDrawingWalls\",\r\n  default: false,\r\n});\r\n\r\nexport const isVisualizedAtom = atom<boolean>({\r\n  key: \"isVisualized\",\r\n  default: false,\r\n});\r\n\r\nexport const isMovingStartAtom = atom<boolean>({\r\n  key: \"isMovingStart\",\r\n  default: false,\r\n});\r\n\r\nexport const isMovingEndAtom = atom<boolean>({\r\n  key: \"isMovingEnd\",\r\n  default: false,\r\n});\r\n\r\nexport const nodeAtom = atomFamily<Node, number[]>({\r\n  key: \"grid\",\r\n  default: ([row, column]) => createNode(row, column),\r\n});\r\n\r\nexport const visitedNodesAtom = atom<Node[]>({\r\n  key: \"visitedNodes\",\r\n  default: [],\r\n});\r\n\r\nexport const shortestPathNodesAtom = atom<Node[]>({\r\n  key: \"shortestPathNodes\",\r\n  default: [],\r\n});\r\n\r\nexport const selectedAlgorithmAtom = atom<string>({\r\n  key: \"selectedAlgorithm\",\r\n  default: Algorithm.Dijkstra,\r\n});\r\n\r\nexport const visualizationSpeedAtom = atom<number>({\r\n  key: \"visualizationSpeed\",\r\n  default: MEDIUM_NODE_UPDATE_SPEED,\r\n});\r\n\r\nexport const nodeClassesAtom = atomFamily<string, number[]>({\r\n  key: \"nodeClasses\",\r\n  default: \"node\",\r\n});\r\n","import { Node, NodePosition } from \"../types\";\r\nimport { NUM_OF_NODES, NUM_OF_ROWS } from \"../state/constants\";\r\n\r\nexport const getIndex = ({ position: { row, column } }: Node): number => {\r\n  return row * NUM_OF_NODES + column;\r\n};\r\n\r\nexport const isEndNode = (node: Node, endPosition: NodePosition): boolean => {\r\n  return (\r\n    node.position.row === endPosition.row &&\r\n    node.position.column === endPosition.column\r\n  );\r\n};\r\n\r\nexport const getNeighbours = (grid: Node[], index: number): Node[] => {\r\n  const neighbours: Node[] = [];\r\n  if (index % NUM_OF_NODES !== NUM_OF_NODES - 1) {\r\n    neighbours.push(grid[index + 1]);\r\n  }\r\n  if (index % NUM_OF_NODES !== 0) {\r\n    neighbours.push(grid[index - 1]);\r\n  }\r\n  if (index >= NUM_OF_NODES) {\r\n    neighbours.push(grid[index - NUM_OF_NODES]);\r\n  }\r\n  if (index < NUM_OF_NODES * (NUM_OF_ROWS - 1)) {\r\n    neighbours.push(grid[index + NUM_OF_NODES]);\r\n  }\r\n  return neighbours;\r\n};\r\n","import { useRef, useEffect } from \"react\";\r\nimport { VoidFunction } from \"./types\";\r\n\r\nexport const useTimeout = (callback: VoidFunction, delay: number) => {\r\n  const savedCallback = useRef<VoidFunction>();\r\n  useEffect(() => {\r\n    savedCallback.current = callback;\r\n  });\r\n  useEffect(() => {\r\n    const tick = () => {\r\n      if (savedCallback.current) {\r\n        savedCallback.current();\r\n      }\r\n    };\r\n    const id = setTimeout(tick, delay);\r\n    return () => clearTimeout(id);\r\n  }, [delay]);\r\n};\r\n","import classNames from \"classnames\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { VscDebugStart } from \"react-icons/vsc\";\r\nimport { FaMapMarkerAlt } from \"react-icons/fa\";\r\nimport { useCallback } from \"react\";\r\nimport { useRecoilState, useRecoilValue } from \"recoil\";\r\nimport \"../css/gridNode.scss\";\r\nimport {\r\n  isDrawingWallsAtom,\r\n  isMovingStartAtom,\r\n  isMovingEndAtom,\r\n  isVisualizedAtom,\r\n  nodeAtom,\r\n  nodeClassesAtom,\r\n  visualizationSpeedAtom,\r\n} from \"../state/atoms\";\r\nimport { NodePosition, VoidFunction } from \"../types\";\r\nimport { getIndex } from \"../algorithms/common\";\r\nimport {\r\n  DEFAULT_END_COLUMN,\r\n  DEFAULT_END_ROW,\r\n  DEFAULT_START_COLUMN,\r\n  DEFAULT_START_ROW,\r\n} from \"../state/constants\";\r\nimport { useTimeout } from \"../hooks\";\r\n\r\nconst PATH_CLASS = \"path\";\r\nconst VISITED_CLASS = \"visited\";\r\n\r\ninterface NodeProps {\r\n  position: NodePosition;\r\n  visitedNumber: number;\r\n  visitedCount: number;\r\n  pathNumber: number;\r\n  setIsStartPosition: any;\r\n  setIsEndPosition: any;\r\n  setResetNode: (childResetNode: VoidFunction, index: number) => void;\r\n  setClearNode: (childClearNode: VoidFunction, index: number) => void;\r\n}\r\n\r\nconst getPathNodeDelay = (\r\n  visualizationSpeed: number,\r\n  visitedCount: number,\r\n  pathNumber: number\r\n): number => {\r\n  return visualizationSpeed * (visitedCount + 2 * (pathNumber + 1));\r\n};\r\n\r\nconst getVisitedNodeDelay = (\r\n  visualizationSpeed: number,\r\n  visitedNumber: number\r\n) => {\r\n  return visualizationSpeed * (visitedNumber + 1);\r\n};\r\n\r\nconst GridNode = ({\r\n  position: { row, column },\r\n  visitedNumber,\r\n  pathNumber,\r\n  visitedCount,\r\n  setIsStartPosition,\r\n  setIsEndPosition,\r\n  setResetNode,\r\n  setClearNode,\r\n}: NodeProps) => {\r\n  const isDrawingWalls = useRecoilValue(isDrawingWallsAtom);\r\n  const isVisualized = useRecoilValue(isVisualizedAtom);\r\n  const visualizationSpeed = useRecoilValue(visualizationSpeedAtom);\r\n  const [isMovingStart, setIsMovingStart] = useRecoilState(isMovingStartAtom);\r\n  const [isMovingEnd, setIsMovingEnd] = useRecoilState(isMovingEndAtom);\r\n  const [node, setNode] = useRecoilState(nodeAtom([row, column]));\r\n  const isDefaultStart = () =>\r\n    row === DEFAULT_START_ROW && column === DEFAULT_START_COLUMN;\r\n  const isDefaultEnd = () =>\r\n    row === DEFAULT_END_ROW && column === DEFAULT_END_COLUMN;\r\n  const [isStart, setIsStart] = useState<boolean>(isDefaultStart());\r\n  const [isEnd, setIsEnd] = useState<boolean>(isDefaultEnd());\r\n  const getClassNames = useCallback((isWall: boolean): string => {\r\n    const wallClass = isWall ? \"wall\" : \"\";\r\n    return classNames(\"node\", wallClass);\r\n  }, []);\r\n\r\n  const [classes, setClasses] = useRecoilState<string>(\r\n    nodeClassesAtom([row, column])\r\n  );\r\n  const isStartPosition = () => {\r\n    return isStart ? { row, column } : undefined;\r\n  };\r\n  const isEndPosition = () => {\r\n    return isEnd ? { row, column } : undefined;\r\n  };\r\n  const resetNode = () => {\r\n    setIsStart(isDefaultStart());\r\n    setIsEnd(isDefaultEnd());\r\n  };\r\n  const clearNode = () => {\r\n    setClasses(getClassNames(node.flags.isWall));\r\n    setNode({\r\n      ...node,\r\n      flags: {\r\n        ...node.flags,\r\n        isVisited: false,\r\n      },\r\n    });\r\n  };\r\n  useEffect(() => {\r\n    setIsStartPosition(isStartPosition, getIndex(node));\r\n    setIsEndPosition(isEndPosition, getIndex(node));\r\n    setResetNode(resetNode, getIndex(node));\r\n    setClearNode(clearNode, getIndex(node));\r\n  });\r\n  useTimeout(() => {\r\n    if (visitedNumber !== -1 && !node.flags.isVisited) {\r\n      ReactDOM.unstable_batchedUpdates(() => {\r\n        setNode({\r\n          ...node,\r\n          flags: {\r\n            ...node.flags,\r\n            isVisited: true,\r\n          },\r\n        });\r\n        setClasses(classNames(getClassNames(node.flags.isWall), VISITED_CLASS));\r\n      });\r\n    }\r\n  }, getVisitedNodeDelay(visualizationSpeed, visitedNumber));\r\n\r\n  useTimeout(() => {\r\n    if (pathNumber !== -1) {\r\n      setClasses(classNames(getClassNames(node.flags.isWall), PATH_CLASS));\r\n    }\r\n  }, getPathNodeDelay(visualizationSpeed, visitedCount, pathNumber));\r\n\r\n  const handleMouseOver = () => {\r\n    if (isMovingStart) {\r\n      setIsStart(true);\r\n    } else if (isMovingEnd) {\r\n      setIsEnd(true);\r\n    } else if (isDrawingWalls) {\r\n      drawWall();\r\n    }\r\n  };\r\n\r\n  const handleMouseDown = () => {\r\n    if (isStart && !isVisualized) {\r\n      setIsMovingStart(true);\r\n    } else if (isEnd && !isVisualized) {\r\n      setIsMovingEnd(true);\r\n    } else {\r\n      drawWall();\r\n    }\r\n  };\r\n\r\n  const handleMouseLeave = () => {\r\n    if (isStart && isMovingStart) {\r\n      setIsStart(false);\r\n    } else if (isEnd && isMovingEnd) {\r\n      setIsEnd(false);\r\n    }\r\n  };\r\n\r\n  const handleMouseUp = () => {\r\n    setIsMovingStart(false);\r\n    setIsMovingEnd(false);\r\n  };\r\n\r\n  const drawWall = () => {\r\n    if (!isVisualized) {\r\n      setNode({\r\n        ...node,\r\n        flags: {\r\n          ...node.flags,\r\n          isWall: !node.flags.isWall,\r\n        },\r\n      });\r\n      setClasses(getClassNames(!node.flags.isWall));\r\n    }\r\n  };\r\n  return (\r\n    <div\r\n      className={classes}\r\n      onMouseOver={handleMouseOver}\r\n      onMouseDown={handleMouseDown}\r\n      onMouseLeave={handleMouseLeave}\r\n      onMouseUp={handleMouseUp}\r\n    >\r\n      {isStart && <VscDebugStart className=\"icon\" />}\r\n      {isEnd && <FaMapMarkerAlt className=\"icon\" />}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GridNode;\r\n","import Heap from \"heap-js\";\r\nimport { NUM_OF_NODES } from \"../state/constants\";\r\nimport { DijkstraProps, Node, NodePosition } from \"../types\";\r\nimport { getIndex, isEndNode, getNeighbours } from \"./common\";\r\n\r\nconst nodeDistanceComparator = (a: Node, b: Node) => {\r\n  const aProps = a.props as DijkstraProps;\r\n  const bProps = b.props as DijkstraProps;\r\n  if (aProps.distance === Infinity && bProps.distance === Infinity) {\r\n    return 0;\r\n  }\r\n  const distanceDifference = aProps.distance - bProps.distance;\r\n  if (distanceDifference !== 0) {\r\n    return distanceDifference;\r\n  }\r\n  return a.position.row - b.position.row;\r\n};\r\n\r\nexport const dijkstra = (\r\n  grid: Node[],\r\n  startPosition: NodePosition,\r\n  endPosition: NodePosition\r\n): Node[] => {\r\n  const visitedNodes: Node[] = [];\r\n  if (!grid || startPosition === endPosition) {\r\n    return visitedNodes;\r\n  }\r\n  grid.forEach((node) => (node.props = { distance: Infinity }));\r\n  //Set start node distance to 0\r\n  setDistance(grid[startPosition.row * NUM_OF_NODES + startPosition.column], 0);\r\n  const priorityQueue = new Heap(nodeDistanceComparator);\r\n  priorityQueue.init(grid);\r\n  const seenIndices = new Set<number>();\r\n  while (!priorityQueue.isEmpty()) {\r\n    const closestNode = priorityQueue.pop();\r\n    if (!closestNode || getDistance(closestNode) === Infinity) {\r\n      break;\r\n    }\r\n    if (isEndNode(closestNode, endPosition)) {\r\n      visitedNodes.push(closestNode);\r\n      break;\r\n    }\r\n    if (closestNode.flags.isWall) {\r\n      continue;\r\n    }\r\n    const index = getIndex(closestNode);\r\n    if (!seenIndices.has(index)) {\r\n      seenIndices.add(index);\r\n      const neighbours = getNeighbours(grid, index);\r\n      neighbours.forEach((neighbour) => {\r\n        const newDistance = getDistance(closestNode) + 1;\r\n        if (newDistance < getDistance(neighbour)) {\r\n          const newNeighbour: Node = JSON.parse(JSON.stringify(neighbour));\r\n          setDistance(newNeighbour, newDistance);\r\n          newNeighbour.parent = closestNode;\r\n          priorityQueue.push(newNeighbour);\r\n        }\r\n      });\r\n      visitedNodes.push(closestNode);\r\n    }\r\n  }\r\n  return visitedNodes;\r\n};\r\n\r\nconst getDistance = (node: Node): number => {\r\n  const props = node.props as DijkstraProps;\r\n  return props.distance;\r\n};\r\n\r\nconst setDistance = (node: Node, distance: number) => {\r\n  const props = node.props as DijkstraProps;\r\n  props.distance = distance;\r\n};\r\n","import Heap from \"heap-js\";\r\nimport { NUM_OF_NODES } from \"../state/constants\";\r\nimport { AStarProps, NodePosition, Node } from \"../types\";\r\nimport { getIndex, isEndNode, getNeighbours } from \"./common\";\r\n\r\nconst nodeFComparator = (a: Node, b: Node) => {\r\n  const aProps = a.props as AStarProps;\r\n  const bProps = b.props as AStarProps;\r\n  if (aProps.f === Infinity && bProps.f === Infinity) {\r\n    return 0;\r\n  }\r\n  const fDifference = aProps.f - bProps.f;\r\n  if (fDifference !== 0) {\r\n    return fDifference;\r\n  }\r\n  return a.props.f - a.props.g - 1 - (b.props.f - b.props.g - 1);\r\n};\r\n\r\nexport const aStar = (\r\n  grid: Node[],\r\n  startPosition: NodePosition,\r\n  endPosition: NodePosition\r\n): Node[] => {\r\n  const visitedNodes: Node[] = [];\r\n  const seenIndices = new Set<number>();\r\n  if (!grid || startPosition === endPosition) {\r\n    return visitedNodes;\r\n  }\r\n  const startNode =\r\n    grid[startPosition.row * NUM_OF_NODES + startPosition.column];\r\n  const discoveredNodes = new Heap(nodeFComparator);\r\n  discoveredNodes.push(startNode);\r\n  grid.forEach((node) => (node.props = { f: Infinity, g: Infinity }));\r\n  setGScore(startNode, 0);\r\n  setFScore(startNode, manhattanDistance(startNode, endPosition));\r\n  while (!discoveredNodes.isEmpty()) {\r\n    const currentNode = discoveredNodes.pop();\r\n    if (!currentNode) {\r\n      break;\r\n    }\r\n    if (!currentNode || isEndNode(currentNode, endPosition)) {\r\n      visitedNodes.push(currentNode);\r\n      break;\r\n    }\r\n    if (currentNode.flags.isWall) {\r\n      continue;\r\n    }\r\n    const currentProps = currentNode.props as AStarProps;\r\n    const index = getIndex(currentNode);\r\n    if (!seenIndices.has(index)) {\r\n      seenIndices.add(index);\r\n      const neighbours = getNeighbours(grid, index);\r\n      neighbours.forEach((neighbour) => {\r\n        const newScore = currentProps.g + 1;\r\n        if (newScore < getGScore(neighbour)) {\r\n          neighbour.parent = currentNode;\r\n          setGScore(neighbour, newScore);\r\n          setFScore(\r\n            neighbour,\r\n            newScore + manhattanDistance(neighbour, endPosition)\r\n          );\r\n          discoveredNodes.add(neighbour);\r\n        }\r\n      });\r\n    }\r\n    visitedNodes.push(currentNode);\r\n  }\r\n  return visitedNodes;\r\n};\r\n\r\nconst manhattanDistance = (a: Node, endPosition: NodePosition): number => {\r\n  const { row, column } = a.position;\r\n  return (\r\n    Math.abs(row - endPosition.row) + Math.abs(column - endPosition.column)\r\n  );\r\n};\r\n\r\nconst getGScore = (node: Node): number => {\r\n  const props = node.props as AStarProps;\r\n  return props.g;\r\n};\r\n\r\nconst setGScore = (node: Node, value: number) => {\r\n  const props = node.props as AStarProps;\r\n  props.g = value;\r\n};\r\n\r\nconst setFScore = (node: Node, value: number) => {\r\n  const props = node.props as AStarProps;\r\n  props.f = value;\r\n};\r\n","import React, { useEffect } from \"react\";\r\nimport {\r\n  useSetRecoilState,\r\n  useRecoilCallback,\r\n  useRecoilState,\r\n  useRecoilValue,\r\n} from \"recoil\";\r\nimport \"../css/grid.scss\";\r\nimport {\r\n  isDrawingWallsAtom,\r\n  nodeAtom,\r\n  nodeClassesAtom,\r\n  isVisualizedAtom,\r\n  visitedNodesAtom,\r\n  shortestPathNodesAtom,\r\n  selectedAlgorithmAtom,\r\n} from \"../state/atoms\";\r\nimport { NUM_OF_NODES, NUM_OF_ROWS } from \"../state/constants\";\r\nimport GridNode from \"./GridNode\";\r\nimport { Algorithm, Node, NodePosition, VoidFunction } from \"../types\";\r\nimport { dijkstra } from \"../algorithms/dijkstra\";\r\nimport { aStar } from \"../algorithms/astar\";\r\n\r\ninterface GridProps {\r\n  setOnVisualize: (childVisualize: VoidFunction) => void;\r\n  setOnReset: (childReset: VoidFunction) => void;\r\n  setOnClearPath: (childClearPath: VoidFunction) => void;\r\n}\r\n\r\nconst startPositionFuncs: (() => NodePosition)[] = [];\r\nconst endPositionFuncs: (() => NodePosition)[] = [];\r\nconst resetNodeFuncs: VoidFunction[] = [];\r\nconst clearNodeFuncs: VoidFunction[] = [];\r\n\r\nconst getShortestPath = (endNode: Node): Node[] => {\r\n  const shortestPath: Node[] = [];\r\n  let node: Node | undefined = endNode;\r\n  while (node) {\r\n    shortestPath.push(node);\r\n    node = node.parent;\r\n  }\r\n  return shortestPath;\r\n};\r\n\r\nconst getArrayIndex = (array: Node[], row: number, column: number): number => {\r\n  return array.length !== 0\r\n    ? array.findIndex(\r\n        (node) => node.position.row === row && node.position.column === column\r\n      )\r\n    : -1;\r\n};\r\n\r\nconst getNodePositionFromChildren = (\r\n  positionFuncs: (() => NodePosition)[]\r\n): NodePosition => {\r\n  let nodePosition = { row: -1, column: -1 };\r\n  for (let positionFunc of positionFuncs) {\r\n    const childPosition = positionFunc();\r\n    if (childPosition) {\r\n      nodePosition = childPosition;\r\n      break;\r\n    }\r\n  }\r\n  return nodePosition;\r\n};\r\n\r\nconst getStartNodePosition = (): NodePosition => {\r\n  return getNodePositionFromChildren(startPositionFuncs);\r\n};\r\n\r\nconst getEndNodePosition = (): NodePosition => {\r\n  return getNodePositionFromChildren(endPositionFuncs);\r\n};\r\n\r\nconst Grid = ({ setOnVisualize, setOnReset, setOnClearPath }: GridProps) => {\r\n  const setIsStartPosition = (\r\n    childStartPosition: () => NodePosition,\r\n    childIndex: number\r\n  ) => {\r\n    startPositionFuncs[childIndex] = childStartPosition;\r\n  };\r\n  const setIsEndPosition = (\r\n    childEndPosition: () => NodePosition,\r\n    childIndex: number\r\n  ) => {\r\n    endPositionFuncs[childIndex] = childEndPosition;\r\n  };\r\n  const setResetNode = (childResetNode: VoidFunction, childIndex: number) => {\r\n    resetNodeFuncs[childIndex] = childResetNode;\r\n  };\r\n  const setClearNode = (childClearNode: VoidFunction, childIndex: number) => {\r\n    clearNodeFuncs[childIndex] = childClearNode;\r\n  };\r\n  const setIsDrawingWalls = useSetRecoilState(isDrawingWallsAtom);\r\n  const setIsVisualized = useSetRecoilState(isVisualizedAtom);\r\n  const [visitedNodes, setVisitedNodes] = useRecoilState(visitedNodesAtom);\r\n  const [shortestPathNodes, setShortestPathNodes] = useRecoilState(\r\n    shortestPathNodesAtom\r\n  );\r\n  const selectedAlgorithm = useRecoilValue(selectedAlgorithmAtom);\r\n  useEffect(() => {\r\n    setOnVisualize(() => {\r\n      visualizeAlgorithm();\r\n      setIsVisualized(true);\r\n    });\r\n    setOnReset(() => {\r\n      resetNodeFuncs.forEach((resetFunc) => resetFunc());\r\n      resetGridState();\r\n      setVisitedNodes([]);\r\n      setShortestPathNodes([]);\r\n      setIsVisualized(false);\r\n    });\r\n    setOnClearPath(() => {\r\n      clearNodeFuncs.forEach((clearFunc) => clearFunc());\r\n      setVisitedNodes([]);\r\n      setShortestPathNodes([]);\r\n      setIsVisualized(false);\r\n    });\r\n  });\r\n  const getGridState = useRecoilCallback(\r\n    ({ snapshot: { getLoadable } }) =>\r\n      () => {\r\n        let nodes: Node[] = [];\r\n        for (let i = 0; i < NUM_OF_ROWS; i++) {\r\n          for (let j = 0; j < NUM_OF_NODES; j++) {\r\n            const nodeValue = getLoadable(nodeAtom([i, j])).getValue();\r\n            nodes = [...nodes, JSON.parse(JSON.stringify(nodeValue))];\r\n          }\r\n        }\r\n        return nodes;\r\n      }\r\n  );\r\n  const resetGridState = useRecoilCallback(({ reset }) => () => {\r\n    for (let i = 0; i < NUM_OF_ROWS; i++) {\r\n      for (let j = 0; j < NUM_OF_NODES; j++) {\r\n        reset(nodeAtom([i, j]));\r\n        reset(nodeClassesAtom([i, j]));\r\n      }\r\n    }\r\n  });\r\n  const visualizeAlgorithm = () => {\r\n    const startNodePosition = getStartNodePosition();\r\n    const endNodePosition = getEndNodePosition();\r\n    const gridNodes = getGridState();\r\n    let newVisitedNodes: Node[] = [];\r\n    switch (selectedAlgorithm) {\r\n      case Algorithm.Dijkstra:\r\n        newVisitedNodes = dijkstra(\r\n          gridNodes,\r\n          startNodePosition,\r\n          endNodePosition\r\n        );\r\n        break;\r\n      case Algorithm.AStar:\r\n        newVisitedNodes = aStar(gridNodes, startNodePosition, endNodePosition);\r\n        break;\r\n    }\r\n    const endNode = newVisitedNodes[newVisitedNodes.length - 1];\r\n    if (\r\n      endNode.position.row === endNodePosition.row &&\r\n      endNode.position.column === endNodePosition.column\r\n    ) {\r\n      setShortestPathNodes(getShortestPath(endNode));\r\n    }\r\n    setVisitedNodes(newVisitedNodes);\r\n  };\r\n  return (\r\n    <div\r\n      className=\"grid\"\r\n      onMouseDown={() => setIsDrawingWalls(true)}\r\n      onMouseUp={() => setIsDrawingWalls(false)}\r\n    >\r\n      {Array.from(Array(NUM_OF_ROWS * NUM_OF_NODES).keys()).map((index) => {\r\n        const row = Math.floor(index / NUM_OF_NODES);\r\n        const column = index % NUM_OF_NODES;\r\n        return (\r\n          <GridNode\r\n            position={{ row, column }}\r\n            visitedNumber={getArrayIndex(visitedNodes, row, column)}\r\n            visitedCount={visitedNodes.length}\r\n            pathNumber={getArrayIndex(\r\n              shortestPathNodes.slice().reverse(),\r\n              row,\r\n              column\r\n            )}\r\n            setIsStartPosition={setIsStartPosition}\r\n            setIsEndPosition={setIsEndPosition}\r\n            setResetNode={setResetNode}\r\n            setClearNode={setClearNode}\r\n            key={index}\r\n          ></GridNode>\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Grid;\r\n","import React, { useState } from \"react\";\r\nimport Menu from \"@mui/material/Menu\";\r\nimport MenuItem from \"@mui/material/MenuItem\";\r\nimport { useSetRecoilState } from \"recoil\";\r\nimport { selectedAlgorithmAtom } from \"../../state/atoms\";\r\nimport { Algorithm } from \"../../types\";\r\nimport Button from \"@mui/material/Button\";\r\nimport { BsFillCaretDownFill } from \"react-icons/bs\";\r\n\r\nconst AlgorithmMenu = () => {\r\n  const setSelectedAlgorithm = useSetRecoilState(selectedAlgorithmAtom);\r\n  const [menuAnchorElement, setMenuAnchorElement] =\r\n    useState<HTMLElement | null>(null);\r\n  const open = Boolean(menuAnchorElement);\r\n  const handleAlgorithmChange = (event: any) => {\r\n    const { myValue: selectedAlgorithm } = event.currentTarget.dataset;\r\n    setSelectedAlgorithm(selectedAlgorithm);\r\n    setMenuAnchorElement(null);\r\n  };\r\n  const handleAlgorithmMenuClick = (event: React.MouseEvent<HTMLElement>) => {\r\n    setMenuAnchorElement(event.currentTarget);\r\n  };\r\n  return (\r\n    <span>\r\n      <Button\r\n        sx={{ mx: \"5px\", backgroundColor: \"#FF9500\" }}\r\n        color=\"inherit\"\r\n        size=\"small\"\r\n        aria-haspopup=\"true\"\r\n        aria-expanded={open ? \"true\" : undefined}\r\n        endIcon={<BsFillCaretDownFill size=\"12\" />}\r\n        onClick={handleAlgorithmMenuClick}\r\n      >\r\n        Algorithms\r\n      </Button>\r\n      <Menu\r\n        id=\"selectedAlgorithm\"\r\n        open={open}\r\n        anchorEl={menuAnchorElement}\r\n        onClose={() => setMenuAnchorElement(null)}\r\n      >\r\n        <MenuItem\r\n          data-my-value={Algorithm.Dijkstra}\r\n          onClick={handleAlgorithmChange}\r\n        >\r\n          Dijkstra\r\n        </MenuItem>\r\n        <MenuItem\r\n          data-my-value={Algorithm.AStar}\r\n          onClick={handleAlgorithmChange}\r\n        >\r\n          A*\r\n        </MenuItem>\r\n      </Menu>\r\n    </span>\r\n  );\r\n};\r\n\r\nexport default AlgorithmMenu;\r\n","import React, { useState } from \"react\";\r\nimport Menu from \"@mui/material/Menu\";\r\nimport MenuItem from \"@mui/material/MenuItem\";\r\nimport { useRecoilState } from \"recoil\";\r\nimport { visualizationSpeedAtom } from \"../../state/atoms\";\r\nimport Button from \"@mui/material/Button\";\r\nimport { BsFillCaretDownFill } from \"react-icons/bs\";\r\nimport {\r\n  FAST_NODE_UPDATE_SPEED,\r\n  MEDIUM_NODE_UPDATE_SPEED,\r\n  SLOW_NODE_UPDATE_SPEED,\r\n} from \"../../state/constants\";\r\n\r\nconst SpeedMenu = () => {\r\n  const [visualizationSpeed, setVisualizationSpeed] = useRecoilState(\r\n    visualizationSpeedAtom\r\n  );\r\n  const [menuAnchorElement, setMenuAnchorElement] =\r\n    useState<HTMLElement | null>(null);\r\n  const open = Boolean(menuAnchorElement);\r\n  const handleSpeedMenuClick = (event: React.MouseEvent<HTMLElement>) => {\r\n    setMenuAnchorElement(event.currentTarget);\r\n  };\r\n  const handleSpeedChange = (event: any) => {\r\n    const { myValue: visualizationSpeed } = event.currentTarget.dataset;\r\n    setVisualizationSpeed(Number.parseInt(visualizationSpeed));\r\n    setMenuAnchorElement(null);\r\n  };\r\n  const getSpeedString = (): string => {\r\n    switch (visualizationSpeed) {\r\n      case FAST_NODE_UPDATE_SPEED:\r\n        return \"Fast\";\r\n      case MEDIUM_NODE_UPDATE_SPEED:\r\n        return \"Medium\";\r\n      case SLOW_NODE_UPDATE_SPEED:\r\n        return \"Slow\";\r\n    }\r\n    return \"Unknown\";\r\n  };\r\n  return (\r\n    <span>\r\n      <Button\r\n        sx={{ ml: \"5px\", backgroundColor: \"#FF9500\" }}\r\n        color=\"inherit\"\r\n        size=\"small\"\r\n        aria-haspopup=\"true\"\r\n        aria-expanded={open ? \"true\" : undefined}\r\n        endIcon={<BsFillCaretDownFill size=\"12\" />}\r\n        onClick={handleSpeedMenuClick}\r\n      >\r\n        {`Speed: ${getSpeedString()}`}\r\n      </Button>\r\n      <Menu\r\n        id=\"visualizationSpeed\"\r\n        open={open}\r\n        anchorEl={menuAnchorElement}\r\n        onClose={() => setMenuAnchorElement(null)}\r\n      >\r\n        <MenuItem\r\n          data-my-value={FAST_NODE_UPDATE_SPEED}\r\n          onClick={handleSpeedChange}\r\n        >\r\n          Fast\r\n        </MenuItem>\r\n        <MenuItem\r\n          data-my-value={MEDIUM_NODE_UPDATE_SPEED}\r\n          onClick={handleSpeedChange}\r\n        >\r\n          Medium\r\n        </MenuItem>\r\n        <MenuItem\r\n          data-my-value={SLOW_NODE_UPDATE_SPEED}\r\n          onClick={handleSpeedChange}\r\n        >\r\n          Slow\r\n        </MenuItem>\r\n      </Menu>\r\n    </span>\r\n  );\r\n};\r\n\r\nexport default SpeedMenu;\r\n","import React, { useState } from \"react\";\r\nimport Menu from \"@mui/material/Menu\";\r\nimport MenuItem from \"@mui/material/MenuItem\";\r\nimport Button from \"@mui/material/Button\";\r\nimport { BsFillCaretDownFill } from \"react-icons/bs\";\r\n\r\nconst PatternMenu = () => {\r\n  const [menuAnchorElement, setMenuAnchorElement] =\r\n    useState<HTMLElement | null>(null);\r\n  const open = Boolean(menuAnchorElement);\r\n  const handlePatternMenuClick = (event: React.MouseEvent<HTMLElement>) => {\r\n    setMenuAnchorElement(event.currentTarget);\r\n  };\r\n  return (\r\n    <span>\r\n      <Button\r\n        sx={{ mx: \"5px\", backgroundColor: \"#FF9500\" }}\r\n        color=\"inherit\"\r\n        size=\"small\"\r\n        aria-haspopup=\"true\"\r\n        aria-expanded={open ? \"true\" : undefined}\r\n        endIcon={<BsFillCaretDownFill size=\"12\" />}\r\n        onClick={handlePatternMenuClick}\r\n      >\r\n        Patterns\r\n      </Button>\r\n      <Menu\r\n        id=\"selectedPattern\"\r\n        open={open}\r\n        anchorEl={menuAnchorElement}\r\n        onClose={() => setMenuAnchorElement(null)}\r\n      >\r\n        <MenuItem data-my-value={\"TODO\"}>Recursive division</MenuItem>\r\n      </Menu>\r\n    </span>\r\n  );\r\n};\r\n\r\nexport default PatternMenu;\r\n","import React from \"react\";\r\nimport Button from \"@mui/material/Button\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport Box from \"@mui/material/Box\";\r\nimport { useRecoilValue } from \"recoil\";\r\nimport { selectedAlgorithmAtom } from \"../state/atoms\";\r\nimport AppBar from \"@mui/material/AppBar\";\r\nimport Toolbar from \"@mui/material/Toolbar\";\r\nimport \"../css/controls.scss\";\r\nimport AlgorithmMenu from \"./menu/AlgorithmMenu\";\r\nimport SpeedMenu from \"./menu/SpeedMenu\";\r\nimport { VoidFunction } from \"../types\";\r\nimport PatternMenu from \"./menu/PatternMenu\";\r\n\r\ninterface ControlsProps {\r\n  visualizeGrid: VoidFunction;\r\n  resetGrid: VoidFunction;\r\n  clearPath: VoidFunction;\r\n}\r\n\r\nconst Controls = ({ visualizeGrid, resetGrid, clearPath }: ControlsProps) => {\r\n  const selectedAlgorithm = useRecoilValue(selectedAlgorithmAtom);\r\n  return (\r\n    <div className=\"controls\">\r\n      <AppBar\r\n        position=\"static\"\r\n        sx={{\r\n          alignItems: \"center\",\r\n          mb: \"5%\",\r\n          backgroundColor: \"#FFA254\",\r\n        }}\r\n      >\r\n        <Toolbar id=\"toolbar\" variant=\"dense\" sx={{ width: \"100%\" }}>\r\n          <Typography\r\n            variant=\"h4\"\r\n            sx={{ ml: 3, fontFamily: \"Dancing Script\", fontWeight: 700 }}\r\n          >\r\n            Pathfinder\r\n          </Typography>\r\n          <Box\r\n            sx={{\r\n              display: \"flex\",\r\n              justifyContent: \"space-evenly\",\r\n              alignItems: \"center\",\r\n              flexDirection: \"row\",\r\n              flex: 1,\r\n            }}\r\n          >\r\n            <div>\r\n              <AlgorithmMenu />\r\n              <PatternMenu />\r\n            </div>\r\n            <Button\r\n              size=\"medium\"\r\n              color=\"inherit\"\r\n              sx={{\r\n                \"&\": { mx: \"5px\", backgroundColor: \"#FF7800\" },\r\n                \"&:hover\": {\r\n                  backgroundColor: \"#FF7800\",\r\n                  transform: \"translateY(-2px)\",\r\n                },\r\n              }}\r\n              onClick={visualizeGrid}\r\n            >\r\n              {`Visualize ${selectedAlgorithm}`}\r\n            </Button>\r\n            <div>\r\n              <Button\r\n                size=\"small\"\r\n                color=\"inherit\"\r\n                sx={{ mx: \"5px\", backgroundColor: \"#FF9500\" }}\r\n                onClick={resetGrid}\r\n              >\r\n                Reset grid\r\n              </Button>\r\n              <Button\r\n                size=\"small\"\r\n                color=\"inherit\"\r\n                sx={{ mx: \"5px\", backgroundColor: \"#FF9500\" }}\r\n                onClick={clearPath}\r\n              >\r\n                Clear path\r\n              </Button>\r\n            </div>\r\n          </Box>\r\n          <Box sx={{ mr: 3, display: \"flex\", justifyContent: \"flex-end\" }}>\r\n            <SpeedMenu />\r\n          </Box>\r\n        </Toolbar>\r\n      </AppBar>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Controls;\r\n","import React from \"react\";\r\nimport Grid from \"./Grid\";\r\nimport Controls from \"./Controls\";\r\nimport \"../css/app.scss\";\r\nimport { VoidFunction } from \"../types\";\r\n\r\nlet visualizeGrid: VoidFunction = () => {};\r\nlet resetGrid: VoidFunction = () => {};\r\nlet clearPath: VoidFunction = () => {};\r\n\r\nconst App = () => {\r\n  const setOnVisualize = (childVisualize: VoidFunction) => {\r\n    visualizeGrid = childVisualize;\r\n  };\r\n  const setOnReset = (childReset: VoidFunction) => {\r\n    resetGrid = childReset;\r\n  };\r\n  const setOnClearPath = (childClearPath: VoidFunction) => {\r\n    clearPath = childClearPath;\r\n  };\r\n  return (\r\n    <div className=\"container\">\r\n      <Controls\r\n        visualizeGrid={() => visualizeGrid()}\r\n        resetGrid={() => resetGrid()}\r\n        clearPath={() => clearPath()}\r\n      ></Controls>\r\n      <Grid\r\n        setOnVisualize={setOnVisualize}\r\n        setOnReset={setOnReset}\r\n        setOnClearPath={setOnClearPath}\r\n      ></Grid>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { RecoilRoot } from \"recoil\";\r\nimport \"./css/index.scss\";\r\nimport App from \"./components/App\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <RecoilRoot>\r\n      <App />\r\n    </RecoilRoot>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}