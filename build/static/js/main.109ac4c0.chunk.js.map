{"version":3,"sources":["types.ts","state/constants.ts","state/atoms.ts","algorithms/common.ts","hooks.ts","state/selectors.ts","components/GridNode.tsx","algorithms/dijkstra.ts","algorithms/astar.ts","components/Grid.tsx","components/menu/AlgorithmMenu.tsx","components/menu/SpeedMenu.tsx","components/menu/PatternMenu.tsx","components/Controls.tsx","components/App.tsx","index.tsx"],"names":["Algorithm","NUM_OF_NODES","isDrawingWallsAtom","atom","key","default","isVisualizedAtom","isMovingStartAtom","isMovingEndAtom","nodeAtom","atomFamily","row","column","position","flags","isWall","isVisited","isPath","isStart","isEnd","createNode","visitedNodesAtom","shortestPathNodesAtom","selectedAlgorithmAtom","Dijkstra","visualizationSpeedAtom","getIndex","isEndNode","node","endPosition","getNeighbours","grid","index","neighbours","push","useTimeout","callback","delay","savedCallback","useRef","useEffect","current","id","setTimeout","clearTimeout","nodeClassesSelector","selectorFamily","get","classes","GridNode","visitedNumber","pathNumber","visitedCount","setIsStartPosition","setIsEndPosition","setClearNode","isDrawingWalls","useRecoilValue","isVisualized","visualizationSpeed","useRecoilState","isMovingStart","setIsMovingStart","isMovingEnd","setIsMovingEnd","setNode","nodeClasses","isStartPosition","undefined","isEndPosition","clearNode","setIsStart","setIsEnd","ReactDOM","unstable_batchedUpdates","getVisitedNodeDelay","getPathNodeDelay","drawWall","className","onMouseOver","onMouseDown","onMouseLeave","onMouseUp","nodeDistanceComparator","a","b","aProps","props","bProps","distance","Infinity","distanceDifference","getDistance","setDistance","nodeFComparator","f","fDifference","g","manhattanDistance","Math","abs","getGScore","setGScore","value","setFScore","startPositionFuncs","endPositionFuncs","clearNodeFuncs","getArrayIndex","array","length","findIndex","getNodePositionFromChildren","positionFuncs","nodePosition","childPosition","positionFunc","Grid","setOnVisualize","setOnReset","setOnClearPath","childStartPosition","childIndex","childEndPosition","childClearNode","setIsDrawingWalls","useSetRecoilState","setIsVisualized","visitedNodes","setVisitedNodes","shortestPathNodes","setShortestPathNodes","selectedAlgorithm","visualizeAlgorithm","resetGridState","forEach","clearFunc","getGridState","useRecoilCallback","getLoadable","snapshot","nodes","i","j","nodeValue","getValue","JSON","parse","stringify","reset","startNodePosition","endNodePosition","gridNodes","newVisitedNodes","startPosition","priorityQueue","Heap","init","seenIndices","Set","closestNode","pop","has","add","neighbour","newDistance","newNeighbour","parent","isEmpty","dijkstra","AStar","startNode","discoveredNodes","currentNode","currentProps","newScore","aStar","endNode","shortestPath","getShortestPath","Array","from","NUM_OF_ROWS","keys","map","floor","slice","reverse","AlgorithmMenu","setSelectedAlgorithm","useState","menuAnchorElement","setMenuAnchorElement","open","Boolean","handleAlgorithmChange","event","currentTarget","dataset","myValue","Button","sx","mx","backgroundColor","color","size","endIcon","onClick","Menu","anchorEl","onClose","MenuItem","SpeedMenu","setVisualizationSpeed","handleSpeedChange","Number","parseInt","ml","getSpeedString","PatternMenu","generateRandomMaze","set","random","Controls","visualizeGrid","resetGrid","clearPath","AppBar","alignItems","mb","Toolbar","variant","width","Typography","fontFamily","fontWeight","Box","display","justifyContent","flexDirection","flex","transform","mr","App","childVisualize","childReset","childClearPath","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.109ac4c0.chunk.js","sourcesContent":["export type VoidFunction = () => void;\r\n\r\nexport interface Node {\r\n  position: NodePosition;\r\n  flags: NodeFlags;\r\n  parent?: Node;\r\n  props?: any;\r\n}\r\n\r\nexport interface DijkstraProps {\r\n  distance: number;\r\n}\r\n\r\nexport interface AStarProps {\r\n  f: number;\r\n  g: number;\r\n}\r\n\r\nexport interface NodePosition {\r\n  row: number;\r\n  column: number;\r\n}\r\n\r\nexport interface NodeFlags {\r\n  isWall: boolean;\r\n  isVisited: boolean;\r\n  isPath: boolean;\r\n  isStart: boolean;\r\n  isEnd: boolean;\r\n}\r\n\r\nexport enum Algorithm {\r\n  Dijkstra = \"Dijkstra\",\r\n  AStar = \"A*\",\r\n}\r\n","export const NUM_OF_ROWS = 20;\r\nexport const NUM_OF_NODES = 50;\r\n\r\nexport const DEFAULT_START_ROW = 10;\r\nexport const DEFAULT_START_COLUMN = 5;\r\nexport const DEFAULT_END_ROW = 10;\r\nexport const DEFAULT_END_COLUMN = 45;\r\n\r\nexport const FAST_NODE_UPDATE_SPEED = 4;\r\nexport const MEDIUM_NODE_UPDATE_SPEED = 10;\r\nexport const SLOW_NODE_UPDATE_SPEED = 25;\r\n","import { atom, atomFamily } from \"recoil\";\r\nimport { Algorithm, Node } from \"../types\";\r\nimport {\r\n  MEDIUM_NODE_UPDATE_SPEED,\r\n  DEFAULT_END_COLUMN,\r\n  DEFAULT_END_ROW,\r\n  DEFAULT_START_COLUMN,\r\n  DEFAULT_START_ROW,\r\n} from \"./constants\";\r\n\r\nconst createNode = (row: number, column: number): Node => {\r\n  return {\r\n    position: {\r\n      row,\r\n      column,\r\n    },\r\n    flags: {\r\n      isWall: false,\r\n      isVisited: false,\r\n      isPath: false,\r\n      isStart: row === DEFAULT_START_ROW && column === DEFAULT_START_COLUMN,\r\n      isEnd: row === DEFAULT_END_ROW && column === DEFAULT_END_COLUMN,\r\n    },\r\n  };\r\n};\r\n\r\nexport const isDrawingWallsAtom = atom<boolean>({\r\n  key: \"isDrawingWalls\",\r\n  default: false,\r\n});\r\n\r\nexport const isVisualizedAtom = atom<boolean>({\r\n  key: \"isVisualized\",\r\n  default: false,\r\n});\r\n\r\nexport const isMovingStartAtom = atom<boolean>({\r\n  key: \"isMovingStart\",\r\n  default: false,\r\n});\r\n\r\nexport const isMovingEndAtom = atom<boolean>({\r\n  key: \"isMovingEnd\",\r\n  default: false,\r\n});\r\n\r\nexport const nodeAtom = atomFamily<Node, number[]>({\r\n  key: \"grid\",\r\n  default: ([row, column]) => createNode(row, column),\r\n});\r\n\r\nexport const visitedNodesAtom = atom<Node[]>({\r\n  key: \"visitedNodes\",\r\n  default: [],\r\n});\r\n\r\nexport const shortestPathNodesAtom = atom<Node[]>({\r\n  key: \"shortestPathNodes\",\r\n  default: [],\r\n});\r\n\r\nexport const selectedAlgorithmAtom = atom<string>({\r\n  key: \"selectedAlgorithm\",\r\n  default: Algorithm.Dijkstra,\r\n});\r\n\r\nexport const visualizationSpeedAtom = atom<number>({\r\n  key: \"visualizationSpeed\",\r\n  default: MEDIUM_NODE_UPDATE_SPEED,\r\n});\r\n","import { Node, NodePosition } from \"../types\";\r\nimport { NUM_OF_NODES, NUM_OF_ROWS } from \"../state/constants\";\r\n\r\nexport const getIndex = ({ position: { row, column } }: Node): number => {\r\n  return row * NUM_OF_NODES + column;\r\n};\r\n\r\nexport const isEndNode = (node: Node, endPosition: NodePosition): boolean => {\r\n  return (\r\n    node.position.row === endPosition.row &&\r\n    node.position.column === endPosition.column\r\n  );\r\n};\r\n\r\nexport const getNeighbours = (grid: Node[], index: number): Node[] => {\r\n  const neighbours: Node[] = [];\r\n  if (index % NUM_OF_NODES !== NUM_OF_NODES - 1) {\r\n    neighbours.push(grid[index + 1]);\r\n  }\r\n  if (index % NUM_OF_NODES !== 0) {\r\n    neighbours.push(grid[index - 1]);\r\n  }\r\n  if (index >= NUM_OF_NODES) {\r\n    neighbours.push(grid[index - NUM_OF_NODES]);\r\n  }\r\n  if (index < NUM_OF_NODES * (NUM_OF_ROWS - 1)) {\r\n    neighbours.push(grid[index + NUM_OF_NODES]);\r\n  }\r\n  return neighbours;\r\n};\r\n","import { useRef, useEffect } from \"react\";\r\nimport { VoidFunction } from \"./types\";\r\n\r\nexport const useTimeout = (callback: VoidFunction, delay: number) => {\r\n  const savedCallback = useRef<VoidFunction>();\r\n  useEffect(() => {\r\n    savedCallback.current = callback;\r\n  });\r\n  useEffect(() => {\r\n    const tick = () => {\r\n      if (savedCallback.current) {\r\n        savedCallback.current();\r\n      }\r\n    };\r\n    const id = setTimeout(tick, delay);\r\n    return () => clearTimeout(id);\r\n  }, [delay]);\r\n};\r\n","import { selectorFamily } from \"recoil\";\r\nimport { nodeAtom } from \"./atoms\";\r\n\r\nconst WALL_CLASS = \" wall\";\r\nconst VISITED_CLASS = \" visited\";\r\nconst PATH_CLASS = \" path\";\r\n\r\nexport const nodeClassesSelector = selectorFamily<string, number[]>({\r\n  key: \"nodeClasses\",\r\n  get:\r\n    ([row, column]) =>\r\n    ({ get }) => {\r\n      const { isWall, isVisited, isPath } = get(nodeAtom([row, column])).flags;\r\n      let classes = \"node\";\r\n      classes += isWall ? WALL_CLASS : \"\";\r\n      classes += isVisited ? VISITED_CLASS : \"\";\r\n      classes += isPath ? PATH_CLASS : \"\";\r\n      return classes;\r\n    },\r\n});\r\n","import React, { useEffect } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { VscDebugStart } from \"react-icons/vsc\";\r\nimport { FaMapMarkerAlt } from \"react-icons/fa\";\r\nimport { useRecoilState, useRecoilValue } from \"recoil\";\r\nimport \"../css/gridNode.scss\";\r\nimport {\r\n  isDrawingWallsAtom,\r\n  isMovingStartAtom,\r\n  isMovingEndAtom,\r\n  isVisualizedAtom,\r\n  nodeAtom,\r\n  visualizationSpeedAtom,\r\n} from \"../state/atoms\";\r\nimport { NodePosition, VoidFunction } from \"../types\";\r\nimport { getIndex } from \"../algorithms/common\";\r\nimport { useTimeout } from \"../hooks\";\r\nimport { nodeClassesSelector } from \"../state/selectors\";\r\n\r\ninterface NodeProps {\r\n  position: NodePosition;\r\n  visitedNumber: number;\r\n  visitedCount: number;\r\n  pathNumber: number;\r\n  setIsStartPosition: any;\r\n  setIsEndPosition: any;\r\n  setClearNode: (childClearNode: VoidFunction, index: number) => void;\r\n}\r\n\r\nconst getPathNodeDelay = (\r\n  visualizationSpeed: number,\r\n  visitedCount: number,\r\n  pathNumber: number\r\n): number => {\r\n  return visualizationSpeed * (visitedCount + 2 * (pathNumber + 1));\r\n};\r\n\r\nconst getVisitedNodeDelay = (\r\n  visualizationSpeed: number,\r\n  visitedNumber: number\r\n) => {\r\n  return visualizationSpeed * (visitedNumber + 1);\r\n};\r\n\r\nconst GridNode = ({\r\n  position: { row, column },\r\n  visitedNumber,\r\n  pathNumber,\r\n  visitedCount,\r\n  setIsStartPosition,\r\n  setIsEndPosition,\r\n  setClearNode,\r\n}: NodeProps) => {\r\n  const isDrawingWalls = useRecoilValue(isDrawingWallsAtom);\r\n  const isVisualized = useRecoilValue(isVisualizedAtom);\r\n  const visualizationSpeed = useRecoilValue(visualizationSpeedAtom);\r\n  const [isMovingStart, setIsMovingStart] = useRecoilState(isMovingStartAtom);\r\n  const [isMovingEnd, setIsMovingEnd] = useRecoilState(isMovingEndAtom);\r\n  const [node, setNode] = useRecoilState(nodeAtom([row, column]));\r\n  const nodeClasses = useRecoilValue<string>(\r\n    nodeClassesSelector([row, column])\r\n  );\r\n  const isStartPosition = () => {\r\n    return node.flags.isStart ? { row, column } : undefined;\r\n  };\r\n  const isEndPosition = () => {\r\n    return node.flags.isEnd ? { row, column } : undefined;\r\n  };\r\n  const clearNode = () => {\r\n    setNode({\r\n      ...node,\r\n      flags: {\r\n        ...node.flags,\r\n        isVisited: false,\r\n        isPath: false,\r\n      },\r\n    });\r\n  };\r\n  const setIsStart = (isStart: boolean) => {\r\n    setNode({\r\n      ...node,\r\n      flags: {\r\n        ...node.flags,\r\n        isStart,\r\n      },\r\n    });\r\n  };\r\n  const setIsEnd = (isEnd: boolean) => {\r\n    setNode({\r\n      ...node,\r\n      flags: {\r\n        ...node.flags,\r\n        isEnd,\r\n      },\r\n    });\r\n  };\r\n  useEffect(() => {\r\n    setIsStartPosition(isStartPosition, getIndex(node));\r\n    setIsEndPosition(isEndPosition, getIndex(node));\r\n    setClearNode(clearNode, getIndex(node));\r\n  });\r\n  useTimeout(() => {\r\n    if (visitedNumber !== -1 && !node.flags.isVisited) {\r\n      ReactDOM.unstable_batchedUpdates(() => {\r\n        setNode({\r\n          ...node,\r\n          flags: {\r\n            ...node.flags,\r\n            isVisited: true,\r\n          },\r\n        });\r\n      });\r\n    }\r\n  }, getVisitedNodeDelay(visualizationSpeed, visitedNumber));\r\n\r\n  useTimeout(() => {\r\n    if (pathNumber !== -1) {\r\n      setNode({\r\n        ...node,\r\n        flags: {\r\n          ...node.flags,\r\n          isPath: true,\r\n        },\r\n      });\r\n    }\r\n  }, getPathNodeDelay(visualizationSpeed, visitedCount, pathNumber));\r\n\r\n  const handleMouseOver = () => {\r\n    if (isMovingStart) {\r\n      setIsStart(true);\r\n    } else if (isMovingEnd) {\r\n      setIsEnd(true);\r\n    } else if (isDrawingWalls) {\r\n      drawWall();\r\n    }\r\n  };\r\n\r\n  const handleMouseDown = () => {\r\n    const { isStart, isEnd } = node.flags;\r\n    if (isStart && !isVisualized) {\r\n      setIsMovingStart(true);\r\n    } else if (isEnd && !isVisualized) {\r\n      setIsMovingEnd(true);\r\n    } else {\r\n      drawWall();\r\n    }\r\n  };\r\n\r\n  const handleMouseLeave = () => {\r\n    const { isStart, isEnd } = node.flags;\r\n    if (isStart && isMovingStart) {\r\n      setIsStart(false);\r\n    } else if (isEnd && isMovingEnd) {\r\n      setIsEnd(false);\r\n    }\r\n  };\r\n\r\n  const handleMouseUp = () => {\r\n    setIsMovingStart(false);\r\n    setIsMovingEnd(false);\r\n  };\r\n\r\n  const drawWall = () => {\r\n    if (!isVisualized) {\r\n      setNode({\r\n        ...node,\r\n        flags: {\r\n          ...node.flags,\r\n          isWall: !node.flags.isWall,\r\n        },\r\n      });\r\n    }\r\n  };\r\n  return (\r\n    <div\r\n      className={nodeClasses}\r\n      onMouseOver={handleMouseOver}\r\n      onMouseDown={handleMouseDown}\r\n      onMouseLeave={handleMouseLeave}\r\n      onMouseUp={handleMouseUp}\r\n    >\r\n      {node.flags.isStart && <VscDebugStart className=\"icon\" />}\r\n      {node.flags.isEnd && <FaMapMarkerAlt className=\"icon\" />}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GridNode;\r\n","import Heap from \"heap-js\";\r\nimport { NUM_OF_NODES } from \"../state/constants\";\r\nimport { DijkstraProps, Node, NodePosition } from \"../types\";\r\nimport { getIndex, isEndNode, getNeighbours } from \"./common\";\r\n\r\nconst nodeDistanceComparator = (a: Node, b: Node) => {\r\n  const aProps = a.props as DijkstraProps;\r\n  const bProps = b.props as DijkstraProps;\r\n  if (aProps.distance === Infinity && bProps.distance === Infinity) {\r\n    return 0;\r\n  }\r\n  const distanceDifference = aProps.distance - bProps.distance;\r\n  if (distanceDifference !== 0) {\r\n    return distanceDifference;\r\n  }\r\n  return a.position.row - b.position.row;\r\n};\r\n\r\nexport const dijkstra = (\r\n  grid: Node[],\r\n  startPosition: NodePosition,\r\n  endPosition: NodePosition\r\n): Node[] => {\r\n  const visitedNodes: Node[] = [];\r\n  if (!grid || startPosition === endPosition) {\r\n    return visitedNodes;\r\n  }\r\n  grid.forEach((node) => (node.props = { distance: Infinity }));\r\n  //Set start node distance to 0\r\n  setDistance(grid[startPosition.row * NUM_OF_NODES + startPosition.column], 0);\r\n  const priorityQueue = new Heap(nodeDistanceComparator);\r\n  priorityQueue.init(grid);\r\n  const seenIndices = new Set<number>();\r\n  while (!priorityQueue.isEmpty()) {\r\n    const closestNode = priorityQueue.pop();\r\n    if (!closestNode || getDistance(closestNode) === Infinity) {\r\n      break;\r\n    }\r\n    if (isEndNode(closestNode, endPosition)) {\r\n      visitedNodes.push(closestNode);\r\n      break;\r\n    }\r\n    if (closestNode.flags.isWall) {\r\n      continue;\r\n    }\r\n    const index = getIndex(closestNode);\r\n    if (!seenIndices.has(index)) {\r\n      seenIndices.add(index);\r\n      const neighbours = getNeighbours(grid, index);\r\n      neighbours.forEach((neighbour) => {\r\n        const newDistance = getDistance(closestNode) + 1;\r\n        if (newDistance < getDistance(neighbour)) {\r\n          const newNeighbour: Node = JSON.parse(JSON.stringify(neighbour));\r\n          setDistance(newNeighbour, newDistance);\r\n          newNeighbour.parent = closestNode;\r\n          priorityQueue.push(newNeighbour);\r\n        }\r\n      });\r\n      visitedNodes.push(closestNode);\r\n    }\r\n  }\r\n  return visitedNodes;\r\n};\r\n\r\nconst getDistance = (node: Node): number => {\r\n  const props = node.props as DijkstraProps;\r\n  return props.distance;\r\n};\r\n\r\nconst setDistance = (node: Node, distance: number) => {\r\n  const props = node.props as DijkstraProps;\r\n  props.distance = distance;\r\n};\r\n","import Heap from \"heap-js\";\r\nimport { NUM_OF_NODES } from \"../state/constants\";\r\nimport { AStarProps, NodePosition, Node } from \"../types\";\r\nimport { getIndex, isEndNode, getNeighbours } from \"./common\";\r\n\r\nconst nodeFComparator = (a: Node, b: Node) => {\r\n  const aProps = a.props as AStarProps;\r\n  const bProps = b.props as AStarProps;\r\n  if (aProps.f === Infinity && bProps.f === Infinity) {\r\n    return 0;\r\n  }\r\n  const fDifference = aProps.f - bProps.f;\r\n  if (fDifference !== 0) {\r\n    return fDifference;\r\n  }\r\n  return a.props.f - a.props.g - 1 - (b.props.f - b.props.g - 1);\r\n};\r\n\r\nexport const aStar = (\r\n  grid: Node[],\r\n  startPosition: NodePosition,\r\n  endPosition: NodePosition\r\n): Node[] => {\r\n  const visitedNodes: Node[] = [];\r\n  const seenIndices = new Set<number>();\r\n  if (!grid || startPosition === endPosition) {\r\n    return visitedNodes;\r\n  }\r\n  const startNode =\r\n    grid[startPosition.row * NUM_OF_NODES + startPosition.column];\r\n  const discoveredNodes = new Heap(nodeFComparator);\r\n  discoveredNodes.push(startNode);\r\n  grid.forEach((node) => (node.props = { f: Infinity, g: Infinity }));\r\n  setGScore(startNode, 0);\r\n  setFScore(startNode, manhattanDistance(startNode, endPosition));\r\n  while (!discoveredNodes.isEmpty()) {\r\n    const currentNode = discoveredNodes.pop();\r\n    if (!currentNode) {\r\n      break;\r\n    }\r\n    if (!currentNode || isEndNode(currentNode, endPosition)) {\r\n      visitedNodes.push(currentNode);\r\n      break;\r\n    }\r\n    if (currentNode.flags.isWall) {\r\n      continue;\r\n    }\r\n    const currentProps = currentNode.props as AStarProps;\r\n    const index = getIndex(currentNode);\r\n    if (!seenIndices.has(index)) {\r\n      seenIndices.add(index);\r\n      const neighbours = getNeighbours(grid, index);\r\n      neighbours.forEach((neighbour) => {\r\n        const newScore = currentProps.g + 1;\r\n        if (newScore < getGScore(neighbour)) {\r\n          neighbour.parent = currentNode;\r\n          setGScore(neighbour, newScore);\r\n          setFScore(\r\n            neighbour,\r\n            newScore + manhattanDistance(neighbour, endPosition)\r\n          );\r\n          discoveredNodes.add(neighbour);\r\n        }\r\n      });\r\n    }\r\n    visitedNodes.push(currentNode);\r\n  }\r\n  return visitedNodes;\r\n};\r\n\r\nconst manhattanDistance = (a: Node, endPosition: NodePosition): number => {\r\n  const { row, column } = a.position;\r\n  return (\r\n    Math.abs(row - endPosition.row) + Math.abs(column - endPosition.column)\r\n  );\r\n};\r\n\r\nconst getGScore = (node: Node): number => {\r\n  const props = node.props as AStarProps;\r\n  return props.g;\r\n};\r\n\r\nconst setGScore = (node: Node, value: number) => {\r\n  const props = node.props as AStarProps;\r\n  props.g = value;\r\n};\r\n\r\nconst setFScore = (node: Node, value: number) => {\r\n  const props = node.props as AStarProps;\r\n  props.f = value;\r\n};\r\n","import React, { useEffect } from \"react\";\r\nimport {\r\n  useSetRecoilState,\r\n  useRecoilCallback,\r\n  useRecoilState,\r\n  useRecoilValue,\r\n} from \"recoil\";\r\nimport \"../css/grid.scss\";\r\nimport {\r\n  isDrawingWallsAtom,\r\n  nodeAtom,\r\n  isVisualizedAtom,\r\n  visitedNodesAtom,\r\n  shortestPathNodesAtom,\r\n  selectedAlgorithmAtom,\r\n} from \"../state/atoms\";\r\nimport { NUM_OF_NODES, NUM_OF_ROWS } from \"../state/constants\";\r\nimport GridNode from \"./GridNode\";\r\nimport { Algorithm, Node, NodePosition, VoidFunction } from \"../types\";\r\nimport { dijkstra } from \"../algorithms/dijkstra\";\r\nimport { aStar } from \"../algorithms/astar\";\r\n\r\ninterface GridProps {\r\n  setOnVisualize: (childVisualize: VoidFunction) => void;\r\n  setOnReset: (childReset: VoidFunction) => void;\r\n  setOnClearPath: (childClearPath: VoidFunction) => void;\r\n}\r\n\r\nconst startPositionFuncs: (() => NodePosition)[] = [];\r\nconst endPositionFuncs: (() => NodePosition)[] = [];\r\nconst clearNodeFuncs: VoidFunction[] = [];\r\n\r\nconst getShortestPath = (endNode: Node): Node[] => {\r\n  const shortestPath: Node[] = [];\r\n  let node: Node | undefined = endNode;\r\n  while (node) {\r\n    shortestPath.push(node);\r\n    node = node.parent;\r\n  }\r\n  return shortestPath;\r\n};\r\n\r\nconst getArrayIndex = (array: Node[], row: number, column: number): number => {\r\n  return array.length !== 0\r\n    ? array.findIndex(\r\n        (node) => node.position.row === row && node.position.column === column\r\n      )\r\n    : -1;\r\n};\r\n\r\nconst getNodePositionFromChildren = (\r\n  positionFuncs: (() => NodePosition)[]\r\n): NodePosition => {\r\n  let nodePosition = { row: -1, column: -1 };\r\n  for (let positionFunc of positionFuncs) {\r\n    const childPosition = positionFunc();\r\n    if (childPosition) {\r\n      nodePosition = childPosition;\r\n      break;\r\n    }\r\n  }\r\n  return nodePosition;\r\n};\r\n\r\nconst getStartNodePosition = (): NodePosition => {\r\n  return getNodePositionFromChildren(startPositionFuncs);\r\n};\r\n\r\nconst getEndNodePosition = (): NodePosition => {\r\n  return getNodePositionFromChildren(endPositionFuncs);\r\n};\r\n\r\nconst Grid = ({ setOnVisualize, setOnReset, setOnClearPath }: GridProps) => {\r\n  const setIsStartPosition = (\r\n    childStartPosition: () => NodePosition,\r\n    childIndex: number\r\n  ) => {\r\n    startPositionFuncs[childIndex] = childStartPosition;\r\n  };\r\n  const setIsEndPosition = (\r\n    childEndPosition: () => NodePosition,\r\n    childIndex: number\r\n  ) => {\r\n    endPositionFuncs[childIndex] = childEndPosition;\r\n  };\r\n  const setClearNode = (childClearNode: VoidFunction, childIndex: number) => {\r\n    clearNodeFuncs[childIndex] = childClearNode;\r\n  };\r\n  const setIsDrawingWalls = useSetRecoilState(isDrawingWallsAtom);\r\n  const setIsVisualized = useSetRecoilState(isVisualizedAtom);\r\n  const [visitedNodes, setVisitedNodes] = useRecoilState(visitedNodesAtom);\r\n  const [shortestPathNodes, setShortestPathNodes] = useRecoilState(\r\n    shortestPathNodesAtom\r\n  );\r\n  const selectedAlgorithm = useRecoilValue(selectedAlgorithmAtom);\r\n  useEffect(() => {\r\n    setOnVisualize(() => {\r\n      visualizeAlgorithm();\r\n      setIsVisualized(true);\r\n    });\r\n    setOnReset(() => {\r\n      resetGridState();\r\n      setVisitedNodes([]);\r\n      setShortestPathNodes([]);\r\n      setIsVisualized(false);\r\n    });\r\n    setOnClearPath(() => {\r\n      clearNodeFuncs.forEach((clearFunc) => clearFunc());\r\n      setVisitedNodes([]);\r\n      setShortestPathNodes([]);\r\n      setIsVisualized(false);\r\n    });\r\n  });\r\n  const getGridState = useRecoilCallback(\r\n    ({ snapshot: { getLoadable } }) =>\r\n      () => {\r\n        let nodes: Node[] = [];\r\n        for (let i = 0; i < NUM_OF_ROWS; i++) {\r\n          for (let j = 0; j < NUM_OF_NODES; j++) {\r\n            const nodeValue = getLoadable(nodeAtom([i, j])).getValue();\r\n            nodes = [...nodes, JSON.parse(JSON.stringify(nodeValue))];\r\n          }\r\n        }\r\n        return nodes;\r\n      }\r\n  );\r\n  const resetGridState = useRecoilCallback(({ reset }) => () => {\r\n    for (let i = 0; i < NUM_OF_ROWS; i++) {\r\n      for (let j = 0; j < NUM_OF_NODES; j++) {\r\n        reset(nodeAtom([i, j]));\r\n      }\r\n    }\r\n  });\r\n  const visualizeAlgorithm = () => {\r\n    const startNodePosition = getStartNodePosition();\r\n    const endNodePosition = getEndNodePosition();\r\n    const gridNodes = getGridState();\r\n    let newVisitedNodes: Node[] = [];\r\n    switch (selectedAlgorithm) {\r\n      case Algorithm.Dijkstra:\r\n        newVisitedNodes = dijkstra(\r\n          gridNodes,\r\n          startNodePosition,\r\n          endNodePosition\r\n        );\r\n        break;\r\n      case Algorithm.AStar:\r\n        newVisitedNodes = aStar(gridNodes, startNodePosition, endNodePosition);\r\n        break;\r\n    }\r\n    const endNode = newVisitedNodes[newVisitedNodes.length - 1];\r\n    if (\r\n      endNode.position.row === endNodePosition.row &&\r\n      endNode.position.column === endNodePosition.column\r\n    ) {\r\n      setShortestPathNodes(getShortestPath(endNode));\r\n    }\r\n    setVisitedNodes(newVisitedNodes);\r\n  };\r\n  return (\r\n    <div\r\n      className=\"grid\"\r\n      onMouseDown={() => setIsDrawingWalls(true)}\r\n      onMouseUp={() => setIsDrawingWalls(false)}\r\n    >\r\n      {Array.from(Array(NUM_OF_ROWS * NUM_OF_NODES).keys()).map((index) => {\r\n        const row = Math.floor(index / NUM_OF_NODES);\r\n        const column = index % NUM_OF_NODES;\r\n        return (\r\n          <GridNode\r\n            position={{ row, column }}\r\n            visitedNumber={getArrayIndex(visitedNodes, row, column)}\r\n            visitedCount={visitedNodes.length}\r\n            pathNumber={getArrayIndex(\r\n              shortestPathNodes.slice().reverse(),\r\n              row,\r\n              column\r\n            )}\r\n            setIsStartPosition={setIsStartPosition}\r\n            setIsEndPosition={setIsEndPosition}\r\n            setClearNode={setClearNode}\r\n            key={index}\r\n          ></GridNode>\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Grid;\r\n","import React, { useState } from \"react\";\r\nimport Menu from \"@mui/material/Menu\";\r\nimport MenuItem from \"@mui/material/MenuItem\";\r\nimport { useSetRecoilState } from \"recoil\";\r\nimport { selectedAlgorithmAtom } from \"../../state/atoms\";\r\nimport { Algorithm } from \"../../types\";\r\nimport Button from \"@mui/material/Button\";\r\nimport { BsFillCaretDownFill } from \"react-icons/bs\";\r\n\r\nconst AlgorithmMenu = () => {\r\n  const setSelectedAlgorithm = useSetRecoilState(selectedAlgorithmAtom);\r\n  const [menuAnchorElement, setMenuAnchorElement] =\r\n    useState<HTMLElement | null>(null);\r\n  const open = Boolean(menuAnchorElement);\r\n  const handleAlgorithmChange = (event: any) => {\r\n    const { myValue: selectedAlgorithm } = event.currentTarget.dataset;\r\n    setSelectedAlgorithm(selectedAlgorithm);\r\n    setMenuAnchorElement(null);\r\n  };\r\n  const handleAlgorithmMenuClick = (event: React.MouseEvent<HTMLElement>) => {\r\n    setMenuAnchorElement(event.currentTarget);\r\n  };\r\n  return (\r\n    <span>\r\n      <Button\r\n        sx={{ mx: \"5px\", backgroundColor: \"#FF9500\" }}\r\n        color=\"inherit\"\r\n        size=\"small\"\r\n        aria-haspopup=\"true\"\r\n        aria-expanded={open ? \"true\" : undefined}\r\n        endIcon={<BsFillCaretDownFill size=\"12\" />}\r\n        onClick={handleAlgorithmMenuClick}\r\n      >\r\n        Algorithms\r\n      </Button>\r\n      <Menu\r\n        id=\"selectedAlgorithm\"\r\n        open={open}\r\n        anchorEl={menuAnchorElement}\r\n        onClose={() => setMenuAnchorElement(null)}\r\n      >\r\n        <MenuItem\r\n          data-my-value={Algorithm.Dijkstra}\r\n          onClick={handleAlgorithmChange}\r\n        >\r\n          Dijkstra\r\n        </MenuItem>\r\n        <MenuItem\r\n          data-my-value={Algorithm.AStar}\r\n          onClick={handleAlgorithmChange}\r\n        >\r\n          A*\r\n        </MenuItem>\r\n      </Menu>\r\n    </span>\r\n  );\r\n};\r\n\r\nexport default AlgorithmMenu;\r\n","import React, { useState } from \"react\";\r\nimport Menu from \"@mui/material/Menu\";\r\nimport MenuItem from \"@mui/material/MenuItem\";\r\nimport { useRecoilState } from \"recoil\";\r\nimport { visualizationSpeedAtom } from \"../../state/atoms\";\r\nimport Button from \"@mui/material/Button\";\r\nimport { BsFillCaretDownFill } from \"react-icons/bs\";\r\nimport {\r\n  FAST_NODE_UPDATE_SPEED,\r\n  MEDIUM_NODE_UPDATE_SPEED,\r\n  SLOW_NODE_UPDATE_SPEED,\r\n} from \"../../state/constants\";\r\n\r\nconst SpeedMenu = () => {\r\n  const [visualizationSpeed, setVisualizationSpeed] = useRecoilState(\r\n    visualizationSpeedAtom\r\n  );\r\n  const [menuAnchorElement, setMenuAnchorElement] =\r\n    useState<HTMLElement | null>(null);\r\n  const open = Boolean(menuAnchorElement);\r\n  const handleSpeedMenuClick = (event: React.MouseEvent<HTMLElement>) => {\r\n    setMenuAnchorElement(event.currentTarget);\r\n  };\r\n  const handleSpeedChange = (event: any) => {\r\n    const { myValue: visualizationSpeed } = event.currentTarget.dataset;\r\n    setVisualizationSpeed(Number.parseInt(visualizationSpeed));\r\n    setMenuAnchorElement(null);\r\n  };\r\n  const getSpeedString = (): string => {\r\n    switch (visualizationSpeed) {\r\n      case FAST_NODE_UPDATE_SPEED:\r\n        return \"Fast\";\r\n      case MEDIUM_NODE_UPDATE_SPEED:\r\n        return \"Medium\";\r\n      case SLOW_NODE_UPDATE_SPEED:\r\n        return \"Slow\";\r\n    }\r\n    return \"Unknown\";\r\n  };\r\n  return (\r\n    <span>\r\n      <Button\r\n        sx={{ ml: \"5px\", backgroundColor: \"#FF9500\" }}\r\n        color=\"inherit\"\r\n        size=\"small\"\r\n        aria-haspopup=\"true\"\r\n        aria-expanded={open ? \"true\" : undefined}\r\n        endIcon={<BsFillCaretDownFill size=\"12\" />}\r\n        onClick={handleSpeedMenuClick}\r\n      >\r\n        {`Speed: ${getSpeedString()}`}\r\n      </Button>\r\n      <Menu\r\n        id=\"visualizationSpeed\"\r\n        open={open}\r\n        anchorEl={menuAnchorElement}\r\n        onClose={() => setMenuAnchorElement(null)}\r\n      >\r\n        <MenuItem\r\n          data-my-value={FAST_NODE_UPDATE_SPEED}\r\n          onClick={handleSpeedChange}\r\n        >\r\n          Fast\r\n        </MenuItem>\r\n        <MenuItem\r\n          data-my-value={MEDIUM_NODE_UPDATE_SPEED}\r\n          onClick={handleSpeedChange}\r\n        >\r\n          Medium\r\n        </MenuItem>\r\n        <MenuItem\r\n          data-my-value={SLOW_NODE_UPDATE_SPEED}\r\n          onClick={handleSpeedChange}\r\n        >\r\n          Slow\r\n        </MenuItem>\r\n      </Menu>\r\n    </span>\r\n  );\r\n};\r\n\r\nexport default SpeedMenu;\r\n","import React, { useState } from \"react\";\r\nimport Menu from \"@mui/material/Menu\";\r\nimport MenuItem from \"@mui/material/MenuItem\";\r\nimport Button from \"@mui/material/Button\";\r\nimport { BsFillCaretDownFill } from \"react-icons/bs\";\r\nimport { useRecoilCallback } from \"recoil\";\r\nimport { NUM_OF_NODES, NUM_OF_ROWS } from \"../../state/constants\";\r\nimport { nodeAtom } from \"../../state/atoms\";\r\n\r\nconst PatternMenu = () => {\r\n  const [menuAnchorElement, setMenuAnchorElement] =\r\n    useState<HTMLElement | null>(null);\r\n  const open = Boolean(menuAnchorElement);\r\n  const handlePatternMenuClick = (event: React.MouseEvent<HTMLElement>) => {\r\n    setMenuAnchorElement(event.currentTarget);\r\n  };\r\n  const handleRandomMazeClick = () => {\r\n    setMenuAnchorElement(null);\r\n    generateRandomMaze();\r\n  };\r\n  const generateRandomMaze = useRecoilCallback(\r\n    ({ set, snapshot: { getLoadable } }) =>\r\n      () => {\r\n        for (let i = 0; i < NUM_OF_ROWS; i++) {\r\n          for (let j = 0; j < NUM_OF_NODES; j++) {\r\n            const nodeValue = getLoadable(nodeAtom([i, j])).getValue();\r\n            const { isStart, isEnd } = nodeValue.flags;\r\n            const randomFactor = Math.random();\r\n            if (randomFactor > 0.7 && !isStart && !isEnd) {\r\n              set(nodeAtom([i, j]), {\r\n                ...nodeValue,\r\n                flags: { ...nodeValue.flags, isWall: true },\r\n              });\r\n            }\r\n          }\r\n        }\r\n      }\r\n  );\r\n  return (\r\n    <span>\r\n      <Button\r\n        sx={{ mx: \"5px\", backgroundColor: \"#FF9500\" }}\r\n        color=\"inherit\"\r\n        size=\"small\"\r\n        aria-haspopup=\"true\"\r\n        aria-expanded={open ? \"true\" : undefined}\r\n        endIcon={<BsFillCaretDownFill size=\"12\" />}\r\n        onClick={handlePatternMenuClick}\r\n      >\r\n        Patterns\r\n      </Button>\r\n      <Menu\r\n        id=\"selectedPattern\"\r\n        open={open}\r\n        anchorEl={menuAnchorElement}\r\n        onClose={() => setMenuAnchorElement(null)}\r\n      >\r\n        <MenuItem onClick={handleRandomMazeClick}>Random maze</MenuItem>\r\n      </Menu>\r\n    </span>\r\n  );\r\n};\r\n\r\nexport default PatternMenu;\r\n","import React from \"react\";\r\nimport Button from \"@mui/material/Button\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport Box from \"@mui/material/Box\";\r\nimport { useRecoilValue } from \"recoil\";\r\nimport { selectedAlgorithmAtom } from \"../state/atoms\";\r\nimport AppBar from \"@mui/material/AppBar\";\r\nimport Toolbar from \"@mui/material/Toolbar\";\r\nimport \"../css/controls.scss\";\r\nimport AlgorithmMenu from \"./menu/AlgorithmMenu\";\r\nimport SpeedMenu from \"./menu/SpeedMenu\";\r\nimport { VoidFunction } from \"../types\";\r\nimport PatternMenu from \"./menu/PatternMenu\";\r\n\r\ninterface ControlsProps {\r\n  visualizeGrid: VoidFunction;\r\n  resetGrid: VoidFunction;\r\n  clearPath: VoidFunction;\r\n}\r\n\r\nconst Controls = ({ visualizeGrid, resetGrid, clearPath }: ControlsProps) => {\r\n  const selectedAlgorithm = useRecoilValue(selectedAlgorithmAtom);\r\n  return (\r\n    <div className=\"controls\">\r\n      <AppBar\r\n        position=\"static\"\r\n        sx={{\r\n          alignItems: \"center\",\r\n          mb: \"5%\",\r\n          backgroundColor: \"#FFA254\",\r\n        }}\r\n      >\r\n        <Toolbar id=\"toolbar\" variant=\"dense\" sx={{ width: \"100%\" }}>\r\n          <Typography\r\n            variant=\"h4\"\r\n            sx={{ ml: 3, fontFamily: \"Dancing Script\", fontWeight: 700 }}\r\n          >\r\n            Pathfinder\r\n          </Typography>\r\n          <Box\r\n            sx={{\r\n              display: \"flex\",\r\n              justifyContent: \"space-evenly\",\r\n              alignItems: \"center\",\r\n              flexDirection: \"row\",\r\n              flex: 1,\r\n            }}\r\n          >\r\n            <div>\r\n              <AlgorithmMenu />\r\n              <PatternMenu />\r\n            </div>\r\n            <Button\r\n              size=\"medium\"\r\n              color=\"inherit\"\r\n              sx={{\r\n                \"&\": { mx: \"5px\", backgroundColor: \"#FF7800\" },\r\n                \"&:hover\": {\r\n                  backgroundColor: \"#FF7800\",\r\n                  transform: \"translateY(-2px)\",\r\n                },\r\n              }}\r\n              onClick={visualizeGrid}\r\n            >\r\n              {`Visualize ${selectedAlgorithm}`}\r\n            </Button>\r\n            <div>\r\n              <Button\r\n                size=\"small\"\r\n                color=\"inherit\"\r\n                sx={{ mx: \"5px\", backgroundColor: \"#FF9500\" }}\r\n                onClick={resetGrid}\r\n              >\r\n                Reset grid\r\n              </Button>\r\n              <Button\r\n                size=\"small\"\r\n                color=\"inherit\"\r\n                sx={{ mx: \"5px\", backgroundColor: \"#FF9500\" }}\r\n                onClick={clearPath}\r\n              >\r\n                Clear path\r\n              </Button>\r\n            </div>\r\n          </Box>\r\n          <Box sx={{ mr: 3, display: \"flex\", justifyContent: \"flex-end\" }}>\r\n            <SpeedMenu />\r\n          </Box>\r\n        </Toolbar>\r\n      </AppBar>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Controls;\r\n","import React from \"react\";\r\nimport Grid from \"./Grid\";\r\nimport Controls from \"./Controls\";\r\nimport \"../css/app.scss\";\r\nimport { VoidFunction } from \"../types\";\r\n\r\nlet visualizeGrid: VoidFunction = () => {};\r\nlet resetGrid: VoidFunction = () => {};\r\nlet clearPath: VoidFunction = () => {};\r\n\r\nconst App = () => {\r\n  const setOnVisualize = (childVisualize: VoidFunction) => {\r\n    visualizeGrid = childVisualize;\r\n  };\r\n  const setOnReset = (childReset: VoidFunction) => {\r\n    resetGrid = childReset;\r\n  };\r\n  const setOnClearPath = (childClearPath: VoidFunction) => {\r\n    clearPath = childClearPath;\r\n  };\r\n  return (\r\n    <div className=\"container\">\r\n      <Controls\r\n        visualizeGrid={() => visualizeGrid()}\r\n        resetGrid={() => resetGrid()}\r\n        clearPath={() => clearPath()}\r\n      ></Controls>\r\n      <Grid\r\n        setOnVisualize={setOnVisualize}\r\n        setOnReset={setOnReset}\r\n        setOnClearPath={setOnClearPath}\r\n      ></Grid>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { RecoilRoot } from \"recoil\";\r\nimport \"./css/index.scss\";\r\nimport App from \"./components/App\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <RecoilRoot>\r\n      <App />\r\n    </RecoilRoot>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}